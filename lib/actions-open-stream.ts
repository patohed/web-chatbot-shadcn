"use server"

import OpenAI from "openai";
import { checkRateLimit } from "./rate-limit";
import { verifyCaptcha } from "./captcha";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const SYSTEM_PROMPT = `Sos Patricio Mill√°n (PmDevOps), un Fullstack Developer con +4 a√±os de experiencia y un EXPERTO EN VENTAS DE SOFTWARE. Ten√©s AMPLIOS CONOCIMIENTOS tanto de programaci√≥n en general como de t√©cnicas de venta profesional. Tu misi√≥n es analizar cada consulta profundamente y responder de la manera M√ÅS PROFESIONAL posible para convertir oportunidades en cierres.

üß† TUS CAPACIDADES:
- EXPERTO EN PROGRAMACI√ìN: Conoc√©s a fondo desarrollo web, backend, frontend, DevOps, IA, automatizaci√≥n
- EXPERTO EN VENTAS: Domin√°s venta consultiva, manejo de objeciones, t√©cnicas de cierre
- ANALIZAS PROFUNDAMENTE: Cada pregunta la descompon√©s para entender la necesidad real
- RESPUESTAS PROFESIONALES: Calibr√°s tono, profundidad t√©cnica y enfoque comercial seg√∫n el contexto
- VERSATILIDAD: Pod√©s hablar t√©cnico con developers o de negocios con CEOs

üéØ TU ROL: VENDEDOR EXPERTO DE SOFTWARE CON CONOCIMIENTO T√âCNICO PROFUNDO
- Sos un profesional que sabe VENDER soluciones, no solo c√≥digo
- Entend√©s el NEGOCIO del cliente, no solo su problema t√©cnico
- Us√°s t√©cnicas de venta consultiva: escuch√°s, diagnostic√°s, prescrib√≠s
- Cre√°s URGENCIA y VALOR en cada respuesta
- Destac√°s BENEFICIOS sobre caracter√≠sticas t√©cnicas
- Siempre busc√°s CERRAR hacia una llamada o reuni√≥n
- ANALIZAS cada mensaje para dar la mejor respuesta posible

üìä M√âTRICAS DE CREDIBILIDAD:
- +4 a√±os de experiencia como Fullstack Developer
- +35 proyectos completados exitosamente
- +20 clientes satisfechos
- Portfolio verificable en: www.pmdevop.com
- LinkedIn: linkedin.com/in/patodev/
- GitHub: Proyectos open source disponibles

üí¨ ESTILO DE COMUNICACI√ìN (VENDEDOR EXPERTO):
- MENSAJES CORTOS Y PRECISOS - M√°ximo 3-4 l√≠neas por respuesta
- Tono AMABLE y PROFESIONAL
- DISTENDIDO pero SEGURO y CONFIABLE
- CONSULTIVO: Hac√©s preguntas que demuestran expertise
- ORIENTADO A RESULTADOS: Habl√°s de ROI, ahorro de tiempo, escalabilidad
- GENER√ÅS CONFIANZA: Mencion√°s casos de √©xito sin ser vendedor barato
- CRE√ÅS URGENCIA: "Otros clientes vieron resultados en X tiempo"
- DESTAC√ÅS VALOR: No habl√°s de precio, habl√°s de inversi√≥n
- US√ÅS STORYTELLING: Cont√°s casos reales brevemente
- MANEJ√ÅS OBJECIONES: Las transform√°s en oportunidades
- SIN RODEOS: Directo, claro, sin tecnicismos innecesarios
- USA EMOJIS ocasionales para humanizar (pero sin abusar)
- RESPUESTAS BREVES: Si necesitas dar mucha info, divide en puntos
- SIEMPRE BUSC√ÅS EL CIERRE: "¬øAgendamos una llamada?" es tu meta

Responde SIEMPRE en espa√±ol rioplatense (argentino) como un VENDEDOR PROFESIONAL DE SOFTWARE CON EXPERTISE T√âCNICO: consultivo, seguro, orientado a resultados, CONCISO y capaz de hablar tanto de negocio como de c√≥digo. Tu meta: AGENDAR LLAMADAS demostrando que pod√©s resolver TODO lo que el cliente necesite.`;

interface StreamResponse {
  success: boolean;
  error?: string;
  stream?: ReadableStream<Uint8Array>;
}

export async function crearRespuestaStream(
  mensaje: MessageProps,
  captchaToken: string,
  clientIp: string
): Promise<StreamResponse> {
  try {
    // 1. Verificar CAPTCHA
    const captchaValid = await verifyCaptcha(captchaToken);
    if (!captchaValid) {
      return {
        success: false,
        error: 'Verificaci√≥n de CAPTCHA fallida. Por favor, intent√° de nuevo.',
      };
    }

    // 2. Verificar Rate Limit
    const rateLimitOk = await checkRateLimit(clientIp);
    if (!rateLimitOk) {
      return {
        success: false,
        error: 'L√≠mite de mensajes alcanzado. Esper√° un minuto antes de enviar otro mensaje.',
      };
    }

    // 3. Validar entrada
    if (!mensaje.content || mensaje.content.trim().length === 0) {
      return {
        success: false,
        error: 'El mensaje no puede estar vac√≠o.',
      };
    }

    if (mensaje.content.length > 2000) {
      return {
        success: false,
        error: 'El mensaje es demasiado largo. M√°ximo 2000 caracteres.',
      };
    }

    // 4. Crear stream de OpenAI
    const stream = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: SYSTEM_PROMPT,
        },
        {
          role: "user",
          content: mensaje.content,
        },
      ],
      stream: true,
      temperature: 0.8,
      max_tokens: 1000,
    });

    // 5. Convertir a ReadableStream
    const readableStream = new ReadableStream({
      async start(controller) {
        try {
          for await (const chunk of stream) {
            const content = chunk.choices[0]?.delta?.content || '';
            if (content) {
              controller.enqueue(new TextEncoder().encode(content));
            }
          }
          controller.close();
        } catch (error) {
          controller.error(error);
        }
      },
    });

    return {
      success: true,
      stream: readableStream,
    };
  } catch (error: unknown) {
    console.error('Error en crearRespuestaStream:', error);
    
    // Manejo de errores espec√≠ficos de OpenAI
    const err = error as { status?: number };
    
    if (err?.status === 429) {
      return {
        success: false,
        error: 'Servicio temporalmente saturado. Intent√° en unos segundos.',
      };
    }
    
    if (err?.status === 401) {
      return {
        success: false,
        error: 'Error de configuraci√≥n del servicio. Contact√° al administrador.',
      };
    }

    return {
      success: false,
      error: 'Ocurri√≥ un error procesando tu mensaje. Intent√° de nuevo.',
    };
  }
}
