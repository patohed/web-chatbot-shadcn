// Service para manejar el flujo conversacional de captura de leads
import { LeadFlowState, LeadFlowStep } from '@/types/lead-flow';
import { LeadGoalsService } from './lead-goals-service';

export class LeadFlowService {
  private goalsService: LeadGoalsService;
  
  constructor() {
    this.goalsService = new LeadGoalsService();
  }
  
  // Detectar si el usuario muestra intenci√≥n de compra
  detectPurchaseIntent(message: string, conversationContext: string[]): boolean {
    const messageLower = message.toLowerCase().trim();
    
    console.log('üîç [INTENT-DETECTION] Analizando mensaje:', messageLower);
    console.log('üîç [INTENT-DETECTION] Contexto conversaci√≥n:', conversationContext.slice(-3)); // √∫ltimos 3 mensajes
    
    // Frases expl√≠citas de intenci√≥n de compra (PRIORIDAD ALTA)
    const strongIntentKeywords = [
      'quiero contratar',
      'necesito contratar',
      'dame presupuesto',
      'cu√°nto cuesta',
      'cuanto sale',
      'quiero avanzar',
      'hag√°moslo',
      'me interesa contratar',
      'quisiera contratar',
      'quiero agendar',
      'agendar una cita',
      'agendar reuni√≥n',
      'agendar reunion', // sin tilde
      'coordinemos',
      'cuando podemos',
      'vamos a avanzar',
      'quiero empezar',
      'tener una reuni√≥n',
      'tener una reunion', // sin tilde
      'me gustar√≠a tener una reuni√≥n',
      'me gustaria tener una reunion', // sin tildes
      'me gustaria tener una reuni√≥n', // mixed
      'quiero una reuni√≥n',
      'quiero una reunion', // sin tilde
      'necesito una reuni√≥n',
      'necesito una reunion', // sin tilde
      'podemos reunirnos',
      'nos reunimos',
      'charlamos',
      'hablamos',
      'conversamos',
    ];

    // Verificar frases expl√≠citas primero
    const hasStrongIntent = strongIntentKeywords.some(keyword => messageLower.includes(keyword));
    if (hasStrongIntent) {
      console.log('‚úÖ [INTENT-DETECTION] STRONG INTENT detectado:', messageLower);
      return true;
    }
    
    // Afirmaciones gen√©ricas que podr√≠an indicar intenci√≥n SI hay contexto
    const genericAffirmations = ['si', 's√≠', 'ok', 'dale', 'genial', 'perfecto', 'excelente'];
    const isGenericAffirmation = genericAffirmations.some(word => {
      // Buscar palabra exacta o con espacios alrededor
      return messageLower === word || 
             messageLower.includes(' ' + word + ' ') ||
             messageLower.startsWith(word + ' ') ||
             messageLower.endsWith(' ' + word);
    });
    
    if (isGenericAffirmation) {
      console.log('üü° [INTENT-DETECTION] Afirmaci√≥n gen√©rica detectada, verificando contexto...');
      
      // Buscar contexto previo que indique que el bot ofreci√≥ agendar/contratar
      const hasContextualIntent = conversationContext.some(msg => {
        const msgLower = msg.toLowerCase();
        return msgLower.includes('agendar') ||
               msgLower.includes('llamada') ||
               msgLower.includes('coordinar') ||
               msgLower.includes('avanzar') ||
               msgLower.includes('contratar') || 
               msgLower.includes('presupuesto') || 
               msgLower.includes('cita') ||
               msgLower.includes('reuni√≥n') ||
               msgLower.includes('siguiente paso') ||
               msgLower.includes('pr√≥ximo paso');
      });
      
      if (hasContextualIntent) {
        console.log('‚úÖ [INTENT-DETECTION] Contexto positivo encontrado ‚Üí ACTIVAR FLUJO');
        return true;
      } else {
        console.log('‚ùå [INTENT-DETECTION] No hay contexto suficiente ‚Üí NO activar flujo');
        return false;
      }
    }

    console.log('‚ùå [INTENT-DETECTION] No se detect√≥ intenci√≥n de compra');
    return false;
  }

  // Obtener la siguiente pregunta seg√∫n el paso actual
  getNextQuestion(currentStep: LeadFlowStep, flowState: LeadFlowState): { step: LeadFlowStep; question: string } | null {
    switch (currentStep) {
      case 'detecting':
      case 'idle':
        // Ya no se usa - ahora idle va a pending_confirmation
        return null;

      case 'pending_confirmation':
        // Usuario confirm√≥ que quiere coordinar ‚Üí preguntar nombre
        return {
          step: 'asking_name',
          question: '¬°Excelente! Para avanzar con tu proyecto necesito algunos datos. ¬øCu√°l es tu nombre completo?'
        };

      case 'asking_name':
        return {
          step: 'asking_email',
          question: `Perfecto, ${flowState.data.nombre}. ¬øCu√°l es tu email para enviarte la propuesta?`
        };

      case 'asking_email':
        return {
          step: 'asking_phone',
          question: '¬øTen√©s un tel√©fono donde pueda contactarte? (Pod√©s saltear este paso si prefer√≠s)'
        };

      case 'asking_phone':
        // SIEMPRE preguntar por proyecto despu√©s del tel√©fono
        return {
          step: 'asking_project',
          question: 'Genial. Ahora contame brevemente: ¬øen qu√© consiste tu proyecto?'
        };

      case 'asking_project':
        // Despu√©s de proyecto, pedir confirmaci√≥n
        return {
          step: 'confirm_send',
          question: `Perfecto, ${flowState.data.nombre}. Ya tengo tu informaci√≥n. ¬øEst√° completa tu consulta o hay algo m√°s que quieras agregar?`
        };

      default:
        return null;
    }
  }

  // Validar email
  isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  // Procesar respuesta del usuario y actualizar el estado
  processUserResponse(
    userMessage: string,
    currentFlowState: LeadFlowState
  ): { 
    newState: LeadFlowState; 
    botResponse: string | null; 
    shouldSendLead: boolean;
    validationError?: string;
  } {
    const newState = { ...currentFlowState };
    let botResponse: string | null = null;
    let shouldSendLead = false;
    let validationError: string | undefined;

    console.log('\n' + '='.repeat(60));
    console.log('üéØ [LEAD-FLOW] Procesando step:', currentFlowState.step);
    console.log('üéØ [LEAD-FLOW] Mensaje usuario:', userMessage.substring(0, 50));
    console.log('üéØ [LEAD-FLOW] Estado actual:', this.goalsService.debugGoals(currentFlowState));
    console.log('='.repeat(60) + '\n');

    switch (currentFlowState.step) {
      case 'pending_confirmation':
        // NUEVO: Usuario confirmando si quiere agendar
        const userResponseConfirmation = userMessage.toLowerCase().trim();
        
        if (
          userResponseConfirmation.includes('si') ||
          userResponseConfirmation.includes('s√≠') ||
          userResponseConfirmation.includes('dale') ||
          userResponseConfirmation.includes('ok') ||
          userResponseConfirmation.includes('perfecto') ||
          userResponseConfirmation.includes('genial') ||
          userResponseConfirmation.includes('excelente')
        ) {
          console.log('‚úÖ [CONFIRMACI√ìN] Usuario ACEPT√ì coordinar - Activando flujo completo');
          newState.data.userWantsToSchedule = true;
          
          // Ahora s√≠ pasar a asking_name
          const nextQuestion = this.getNextQuestion('pending_confirmation', newState);
          if (nextQuestion) {
            newState.step = nextQuestion.step;
            botResponse = nextQuestion.question;
          }
        } else if (
          userResponseConfirmation.includes('no') ||
          userResponseConfirmation.includes('nop') ||
          userResponseConfirmation.includes('tampoco') ||
          userResponseConfirmation.includes('ahora no')
        ) {
          console.log('‚ùå [CONFIRMACI√ìN] Usuario RECHAZ√ì coordinar - Cancelando flujo');
          newState.step = 'idle';
          newState.data.userWantsToSchedule = false;
          botResponse = '¬°Perfecto! Cualquier cosa que necesites, ac√° estoy para ayudarte. üòä';
        } else {
          // Respuesta ambigua, pedir clarificaci√≥n
          console.log('‚ùì [CONFIRMACI√ìN] Respuesta ambigua - Solicitando clarificaci√≥n');
          botResponse = 'Disculp√°, ¬øes un s√≠ o un no? ¬øQuer√©s que coordinemos la reuni√≥n? üìÖ';
        }
        break;

      case 'asking_name':
        // Validar goal: nombre
        const nombreValidation = this.goalsService.validateGoal('nombre', userMessage.trim());
        if (!nombreValidation.valid) {
          validationError = nombreValidation.error;
          break;
        }
        
        newState.data.nombre = userMessage.trim();
        console.log('‚úÖ [GOAL COMPLETADO] Nombre:', newState.data.nombre);
        
        // Siguiente pregunta
        const nextAfterName = this.getNextQuestion('asking_name', newState);
        if (nextAfterName) {
          newState.step = nextAfterName.step;
          botResponse = nextAfterName.question;
        }
        break;

      case 'asking_email':
        // Validar goal: email
        const emailValidation = this.goalsService.validateGoal('email', userMessage.trim());
        if (!emailValidation.valid) {
          validationError = emailValidation.error;
          break;
        }
        
        newState.data.email = userMessage.trim().toLowerCase();
        console.log('‚úÖ [GOAL COMPLETADO] Email:', newState.data.email);
        
        // Siguiente pregunta
        const nextAfterEmail = this.getNextQuestion('asking_email', newState);
        if (nextAfterEmail) {
          newState.step = nextAfterEmail.step;
          botResponse = nextAfterEmail.question;
        }
        break;

      case 'asking_phone':
        // Goal opcional: tel√©fono
        const userResponseLower = userMessage.toLowerCase();
        
        if (
          userResponseLower.includes('no') ||
          userResponseLower.includes('skip') ||
          userResponseLower.includes('saltar') ||
          userResponseLower.includes('pasar')
        ) {
          console.log('‚è≠Ô∏è  [GOAL SKIPPED] Tel√©fono: usuario opt√≥ por saltear');
          newState.data.telefono = undefined;
        } else {
          newState.data.telefono = userMessage.trim();
          console.log('‚úÖ [GOAL COMPLETADO] Tel√©fono:', newState.data.telefono);
        }
        
        // SIEMPRE pasar a asking_project (no verificar goals a√∫n)
        const nextAfterPhone = this.getNextQuestion('asking_phone', newState);
        if (nextAfterPhone) {
          newState.step = nextAfterPhone.step;
          botResponse = nextAfterPhone.question;
          console.log('‚è≠Ô∏è  [FLOW] Pasando a solicitar descripci√≥n del proyecto');
        }
        break;

      case 'asking_project':
        // Validar goal: proyecto
        const proyectoValidation = this.goalsService.validateGoal('proyecto', userMessage.trim());
        if (!proyectoValidation.valid) {
          validationError = proyectoValidation.error;
          break;
        }
        
        newState.data.proyecto = userMessage.trim();
        console.log('‚úÖ [GOAL COMPLETADO] Proyecto:', newState.data.proyecto);
        
        // Verificar que todos los goals obligatorios est√©n completos
        if (this.goalsService.canSendLead(newState)) {
          // ‚úÖ GOALS COMPLETOS - Pasar a CONFIRMACI√ìN
          const nextQuestion = this.getNextQuestion('asking_project', newState);
          if (nextQuestion) {
            newState.step = nextQuestion.step;
            botResponse = nextQuestion.question;
            shouldSendLead = false; // NO enviar a√∫n, esperar confirmaci√≥n
            console.log('üéØ [GOALS] ‚úÖ TODOS LOS GOALS COMPLETADOS - Pasando a confirmaci√≥n');
            console.log('üéØ [GOALS] Estado:', this.goalsService.debugGoals(newState));
          }
        } else {
          // Esto no deber√≠a pasar, pero por seguridad
          const missingGoal = this.goalsService.getNextMissingGoal(newState);
          console.error('‚ö†Ô∏è [GOALS] Falta goal despu√©s de proyecto:', missingGoal);
        }
        break;

      case 'confirm_send':
        // Procesar confirmaci√≥n del usuario (si/no)
        const confirmLower = userMessage.toLowerCase().trim();
        
        // Detecci√≥n de S√ç (consulta completa)
        const isYes = (
          confirmLower === 'si' ||
          confirmLower === 's√≠' ||
          confirmLower === 'yes' ||
          confirmLower === 'ok' ||
          confirmLower === 'dale' ||
          confirmLower === 'perfecto' ||
          confirmLower === 'excelente' ||
          confirmLower === 'completa' ||
          confirmLower === 'est√° completa' ||
          confirmLower === 'esta completa' ||
          confirmLower === 'por supuesto' ||
          confirmLower.includes('s√≠') ||
          confirmLower.includes('si,') ||
          confirmLower.includes('completa')
        );
        
        // Detecci√≥n de NO (quiere agregar m√°s)
        const isNo = (
          confirmLower === 'no' ||
          confirmLower === 'nope' ||
          confirmLower === 'negativo' ||
          confirmLower === 'falta' ||
          confirmLower === 'incompleta' ||
          confirmLower.includes('no est√° completa') ||
          confirmLower.includes('no esta completa') ||
          confirmLower.includes('no,') ||
          confirmLower.includes('quiero agregar') ||
          confirmLower.includes('falta algo') ||
          confirmLower.includes('hay m√°s')
        );
        
        if (isYes) {
          // Usuario confirm√≥ que est√° completa - ENVIAR EMAIL
          newState.data.confirmSendEmail = true;
          newState.step = 'completed';
          botResponse = '¬°Perfecto, ' + newState.data.nombre + '! Te env√≠o el email ahora mismo con todos los detalles. Me voy a contactar con vos a la brevedad. ¬°Muchas gracias por tu confianza! üöÄ';
          shouldSendLead = true;
          console.log('‚úÖ [CONFIRMACI√ìN] Usuario confirm√≥ (consulta completa) - ENVIANDO EMAIL');
          console.log('üìß [SEND] Preparando env√≠o a:', newState.data.email);
        } else if (isNo) {
          // Usuario quiere agregar m√°s - VOLVER A FLUJO CONVERSACIONAL
          newState.data.confirmSendEmail = false;
          newState.step = 'idle'; // Volver a flujo normal
          botResponse = 'Perfecto, contame qu√© m√°s quer√©s agregar o consultar. Estoy ac√° para ayudarte.';
          shouldSendLead = false;
          console.log('‚ùå [CONFIRMACI√ìN] Usuario quiere agregar m√°s - Volviendo a flujo conversacional');
          console.log('üí¨ [FLOW] Estado vuelve a idle para continuar conversaci√≥n');
        } else {
          // Respuesta ambigua - volver a preguntar
          validationError = 'Por favor respond√© "si" si est√° completa tu consulta, o "no" si quer√©s agregar algo m√°s.';
          console.log('‚ö†Ô∏è [CONFIRMACI√ìN] Respuesta ambigua, solicitando clarificaci√≥n');
        }
        break;

      default:
        break;
    }

    console.log('\n' + '-'.repeat(60));
    console.log('üèÅ [LEAD-FLOW] RESULTADO:');
    console.log('  ‚û°Ô∏è Nuevo step:', newState.step);
    console.log('  ‚û°Ô∏è Bot response:', botResponse ? botResponse.substring(0, 80) + '...' : '(null)');
    console.log('  ‚û°Ô∏è shouldSendLead:', shouldSendLead);
    console.log('  ‚û°Ô∏è validationError:', validationError || '(ninguno)');
    console.log('  ‚û°Ô∏è Estado goals:', this.goalsService.debugGoals(newState));
    console.log('-'.repeat(60) + '\n');

    return { 
      newState, 
      botResponse, 
      shouldSendLead,
      validationError 
    };
  }

  // Extraer descripci√≥n del proyecto de mensajes anteriores
  extractProjectDescription(conversacion: string[]): string {
    // Buscar mensajes del usuario que contengan descripciones de proyecto
    const userMessages = conversacion
      .filter(msg => msg.startsWith('Cliente:'))
      .map(msg => msg.replace('Cliente:', '').trim());

    // Palabras clave que indican descripci√≥n de proyecto
    const projectKeywords = [
      'e-commerce', 'ecommerce', 'tienda', 'p√°gina web', 'web', 'aplicaci√≥n',
      'app', 'sistema', 'plataforma', 'sitio', 'portal', 'dashboard',
      'chatbot', 'bot', 'automatizaci√≥n', 'integraci√≥n', 'api'
    ];

    // Encontrar mensajes que mencionen proyectos
    const projectMessages = userMessages.filter(msg => {
      const msgLower = msg.toLowerCase();
      return projectKeywords.some(keyword => msgLower.includes(keyword)) && msg.length > 15;
    });

    if (projectMessages.length > 0) {
      return projectMessages.join(' | ');
    }

    // Si no encuentra nada espec√≠fico, concatenar mensajes largos
    const longMessages = userMessages.filter(msg => msg.length > 20);
    return longMessages.length > 0 
      ? longMessages.join(' | ')
      : 'Proyecto de desarrollo web/software (detalles a confirmar)';
  }

  // Crear estado inicial del flujo
  createInitialState(): LeadFlowState {
    return {
      step: 'idle',
      data: {},
      conversacion: [],
    };
  }
}
